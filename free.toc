
(def pure)
(def free-app)

(defprotocol FreeWrapper
  (wrap-free [x]
    (pure x)))

(defprotocol FreeEvaluate
  (evaluate [x eval-f]))

(deftype free-monad [v]
  ;; (assert (implements? map v))

  Stringable
  (string-list [_]
    (comp (list "<free-monad: ")
          (string-list v)
          (list ">")))

  FreeWrapper
  (wrap-free [x] x)

  FreeEvaluate
  (evaluate [_ f]
    (f (map v (fn [y]
                (evaluate y f)))))

  Container
  (map [fv f]
    (free-app (pure f) (list fv))
    ;; (free-monad (map v (fn [y]
    ;;                      (pure (evaluate y f)))))
    )
  (wrap [_ v] (pure v))
  (apply* [f args]
    (free-app f args))
  (flat-map [_ f]
    (free-monad (map v (fn [y]
                         (flat-map y f))))))

(deftype app-fn [v]
  Stringable
  (string-list [_] (list "<AppFn>"))

  FreeEvaluate
  (evaluate [_ f]
    (fn [& args]
      (evaluate (apply v args) f))))

(defprotocol FreeApply
  (free-apply [f vs]
    (apply* f vs)))

(extend-type Function
  FreeApply
  (free-apply [f vs]
    (apply f vs)))

(deftype free-app [v args]
  ;; (assert (implements? evaluate v))

  Stringable
  (string-list [_]
    (comp (list "<free-app: ")
          (interpose (flat-map args string-list) " ")
          (list ">")))

  FreeWrapper
  (wrap-free [x] x)

  FreeEvaluate
  (evaluate [_ f]
    (free-apply (evaluate v f)
                (map args (fn [v]
                            (evaluate v f)))))

  Container
  (map [_ f]
    (free-app (map v (fn [g]
                       (fn [& args]
                         (f (apply g args)))))
              args))
  (wrap [_ v] (pure v))
  (apply* [f args]
    (free-app f args))
  (flat-map [fv f]
    (free-app (app-fn (fn [fx & xs]
                        (f (apply fx xs))))
              (cons v args))))

(deftype pure [v]
  Stringable
  (string-list [_]
    (comp (list "<pure: ")
          (string-list v)
          (list ">")))

  FreeWrapper
  (wrap-free [x] x)

  FreeEvaluate
  (evaluate [_ eval-f]
    (eval-f v))

  Container
  (map [fv f]
    (free-app (pure f) (list fv)))
  (wrap [_ v] (pure v))
  (apply* [f args]
    (free-app f args))
  (flat-map [_ f]
    (f v)))

(defn lift [x]
  (free-monad (map x wrap-free)))
